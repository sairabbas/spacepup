{"version":3,"sources":["components/AppNav.js","components/Home.js","components/Admin.js","components/User.js","components/EventForm.js","components/BookingForm.js","components/EditEvent.js","App.js","serviceWorker.js","index.js","components/SpaceDoggo.png"],"names":["AppNav","Navbar","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","Home","style","backgroundColor","display","justifyContent","alignItems","height","fontSize","src","Img","alt","Admin","props","state","isLoading","bookings","fetch","response","json","body","this","setState","rows","map","booking","i","Button","tag","Link","to","margin","float","Container","marginTop","Table","width","User","Events","bookEvent","bind","id","window","localStorage","setItem","history","push","event","name","format","event_date","onClick","EventForm","emptyItem","Date","date","events","item","handleSubmit","handleChange","handleDateChange","editEvent","method","headers","JSON","stringify","preventDefault","target","value","httpStatus","console","log","message","updatedEvents","filter","componentDidMount","title","key","size","remove","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","selected","BookingForm","age","email","first_name","last_name","getItem","store","addNotification","container","animationIn","animationOut","dismiss","duration","EditEvent","e","loadEvent","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5419cce3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Nav, Navbar,NavItem, NavbarBrand, NavLink} from 'reactstrap';\r\n\r\nclass AppNav extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"md\">\r\n                <NavbarBrand href=\"/\">Spacepup</NavbarBrand>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavLink href=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink href=\"/user\">User</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                <NavLink href=\"/admin\">Admin</NavLink>\r\n                </NavItem>\r\n                </Nav>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppNav;","import React, { Component } from 'react';\r\nimport AppNav from './AppNav';\r\nimport Img from './SpaceDoggo.png'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{backgroundColor: '#8AC7DB'}}>\r\n                <AppNav />\r\n\r\n                <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', fontSize: '70px'}}>\r\n                    <center>\r\n                        <img src= {Img} alt=\"pic\"/>\r\n                    </center>\r\n                    Welcome to Spacepup!\r\n                </h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Table, Container, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport AppNav from './AppNav';\r\n\r\nclass Admin extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            bookings: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/bookings');\r\n        const body = await response.json();\r\n        this.setState({bookings: body, isLoading: false});\r\n    }\r\n\r\n    render() {\r\n        const {isLoading} = this.state;\r\n\r\n        if(isLoading)\r\n             return (<div style={{backgroundColor: '#8AC7DB'}}>Loading...</div>);\r\n\r\n        let rows = this.state.bookings.map((booking, i) => \r\n            <tr>\r\n                <td>{this.state.bookings[i][0]}</td>\r\n                <td>{this.state.bookings[i][1]}</td>\r\n                <td>{this.state.bookings[i][2]}</td>\r\n                <td>{this.state.bookings[i][3]}</td>\r\n                <td>{this.state.bookings[i][4]}</td>\r\n            </tr>   \r\n        )\r\n\r\n        return (\r\n            <div style={{backgroundColor: '#8AC7DB'}}>\r\n                <AppNav />\r\n                <Button color=\"primary\" tag={Link} to=\"/event\" style={{margin: '10px', float: 'right'}}>Create a Room</Button>\r\n                {''}\r\n                    <Container>\r\n                        <h3 style={{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '20px'}}>Booking List</h3>\r\n                        <Table className=\"mt-4\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th width=\"20%\">First Name</th>\r\n                                    <th width=\"20%\">Last Name</th>\r\n                                    <th width=\"10%\">Age</th>\r\n                                    <th width=\"30%\">Email</th>\r\n                                    <th width=\"20%\">Room</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {rows}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport Moment from 'react-moment';\r\n\r\nimport AppNav from './AppNav';\r\n\r\nclass User extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            Events: []\r\n        }\r\n        this.bookEvent = this.bookEvent.bind(this);\r\n    }\r\n\r\n    bookEvent(id) {\r\n        window.localStorage.setItem(\"eventId\", id);\r\n        this.props.history.push('/booking');\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/events');\r\n        const body = await response.json();\r\n        this.setState({Events: body, isLoading: false});\r\n    }\r\n\r\n    render() {\r\n        const {Events, isLoading} = this.state;\r\n        if(isLoading)\r\n            return (<div>Loading...</div>);\r\n\r\n        return (\r\n            <div>\r\n                <AppNav />\r\n                <h1 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}} >Available Rooms</h1>\r\n                {\r\n                    Events.map(event => \r\n                        <div id={event.id} className=\"boxed\" style={{ justifyContent: 'center'}}>\r\n                            <h3>{event.name}</h3>\r\n                            <Moment format=\"DD/MM/YYYY\">{event.event_date}</Moment>\r\n                            <hr />\r\n                            <p>Blew up and I'm in the city still, I'm still here, dawg</p>\r\n                            <Button \r\n                                color=\"primary\"\r\n                                onClick={() => this.bookEvent(event.id)}\r\n                                >\r\n                                Book\r\n                                </Button>\r\n                        </div>    \r\n                    )\r\n                }   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\r\nimport { Table, Container, Input, Button, Label, Form, FormGroup } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport Moment from 'react-moment';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport AppNav from './AppNav';\r\n\r\nclass EventForm extends Component {\r\n\r\n    emptyItem = {\r\n        name: '',\r\n        event_date: new Date()\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            date: new Date(),\r\n            isLoading: true,\r\n            events: [],\r\n            item: this.emptyItem\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.editEvent = this.editEvent.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const item = this.state.item;\r\n        await fetch(`/api/events`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        });\r\n        event.preventDefault();\r\n        this.props.history.push(\"/events\");\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({ item });\r\n    }\r\n    \r\n    handleDateChange(date) {\r\n        let item = {...this.state.item};\r\n        item.event_date = date;\r\n        this.setState({ item });\r\n    }\r\n\r\n    async remove(id) {\r\n        const response = await fetch(`/api/events/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        try {\r\n            const body = await response.json();\r\n        if(body.httpStatus === \"BAD_REQUEST\") {\r\n            console.log(body.message);\r\n        } else {\r\n            let updatedEvents = [...this.state.events].filter(i => i.id !== id);\r\n            this.setState({ events: updatedEvents });\r\n        }\r\n        } catch(e) {} \r\n        this.componentDidMount();\r\n    }\r\n\r\n    editEvent(id) {\r\n        window.localStorage.setItem(\"eventId\", id);\r\n        this.props.history.push('/editEvent');\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/events');\r\n        const body = await response.json();\r\n        this.setState({events: body, isLoading: false});\r\n    }\r\n\r\n    render() {\r\n        const title = <h3 style = {{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '10px'}}>Room Information</h3>\r\n        const {events, isLoading} = this.state;\r\n\r\n        if(isLoading)\r\n             return (<div style={{backgroundColor: '#8AC7DB'}}>Loading...</div>);\r\n\r\n        let rows = events.map(event => \r\n            <tr key={event.id}>\r\n                <td>{event.name}</td>\r\n                <td><Moment date={event.event_date} format=\"DD/MM/YYYY\" /></td>\r\n                <td><Button size=\"sm\" color=\"secondary\" onClick={() => this.editEvent(event.id)} >Modify</Button></td>\r\n                <td><Button size=\"sm\" color=\"danger\" onClick={() => this.remove(event.id)}>Delete</Button></td>\r\n            </tr>   \r\n        )\r\n\r\n        return (\r\n            <div style={{backgroundColor: '#8AC7DB'}}>\r\n                <AppNav />\r\n                <Container>\r\n                    {title}\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Room Number</Label>\r\n                            <Input type=\"text\" name=\"name\" id=\"name\" value={this.state.item.name}\r\n                                onChange={this.handleChange} autoComplete=\"name\" />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label for=\"event_date\">Date</Label>\r\n                            <DatePicker selected={this.state.item.event_date} onChange={this.handleDateChange} />\r\n                        </FormGroup>\r\n                        \r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\">Create</Button>{' '}\r\n                            <Button color=\"secondary\" tag={Link} to=\"/admin\">Cancel</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Container>\r\n\r\n                {''}\r\n                    <Container>\r\n                        <h3 style = {{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '10px'}}>Available Rooms</h3>\r\n                        <Table className=\"mt-4\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th width=\"30%\">Number</th>\r\n                                    <th>Date</th>\r\n                                    <th width=\"10%\">Action</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {rows}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventForm;","import React, { Component } from 'react';\r\nimport { Container, Input, Button, Label, Form, FormGroup } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { store } from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport 'animate.css';\r\n\r\nimport AppNav from './AppNav';\r\n\r\nclass BookingForm extends Component {\r\n\r\n    emptyItem = {\r\n        age: '',\r\n        email: '',\r\n        event: {id: 1},\r\n        first_name: '',\r\n        last_name: ''\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            item: this.emptyItem \r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const item = this.state.item;\r\n        await fetch(`/api/users`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        });\r\n        this.props.history.push('/user');\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({ item });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let item = {...this.state.item};\r\n        const event = window.localStorage.getItem(\"eventId\");\r\n        item.event.id = event;\r\n    }\r\n\r\n    render() {\r\n        const title = <h3 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Booking Information</h3>\r\n        return (\r\n            <div style={{backgroundColor: '#8AC7DB'}}>\r\n            <AppNav />\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"first_name\">First Name</Label>\r\n                        <Input type=\"text\" name=\"first_name\" id=\"first_name\" \r\n                            onChange={this.handleChange} autoComplete=\"name\" />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"last_name\">Last Name</Label>\r\n                        <Input type=\"text\" name=\"last_name\" id=\"last_name\" \r\n                            onChange={this.handleChange} autoComplete=\"name\" />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"age\">Age</Label>\r\n                        <Input type=\"text\" name=\"age\" id=\"age\" \r\n                            onChange={this.handleChange} />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input type=\"text\" name=\"email\" id=\"email\" \r\n                            onChange={this.handleChange} />\r\n                    </FormGroup>\r\n                    \r\n                    <FormGroup>\r\n                        <Button \r\n                            color=\"primary\" \r\n                            type=\"submit\"\r\n                            onClick={() => {\r\n                                store.addNotification({\r\n                                  title: 'Event',\r\n                                  message: 'Event booked successfully',\r\n                                  type: 'default',                         \r\n                                  container: 'bottom-left',                \r\n                                  animationIn: [\"animated\", \"fadeIn\"],     \r\n                                  animationOut: [\"animated\", \"fadeOut\"],   \r\n                                  dismiss: {\r\n                                    duration: 3000 \r\n                                  }\r\n                                })\r\n                              }}    \r\n                        >\r\n                            Book\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/user\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookingForm;","import React, { Component } from 'react';\r\nimport { Container, Input, Button, Label, Form, FormGroup } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport AppNav from './AppNav';\r\n\r\nclass EditEvent extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            id: '',\r\n            name: '',\r\n            event_date: new Date()\r\n        }\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.loadEvent = this.loadEvent.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const item = this.state;\r\n        await fetch('/api/event/'+ this.state.id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        });\r\n        \r\n        this.props.history.push(\"/event\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadEvent();\r\n    }\r\n\r\n    handleDateChange(date) {\r\n        this.setState({ event_date: date });\r\n    }\r\n\r\n    async loadEvent() {\r\n        const response = await fetch('/api/event/' + window.localStorage.getItem(\"eventId\"));\r\n        const event = await response.json();\r\n        this.setState({\r\n            id: event.id,\r\n            name: event.name\r\n        });\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        const title = <h3>Edit Form</h3>\r\n\r\n        return (\r\n            <div style={{backgroundColor: '#8AC7DB'}}>\r\n                <AppNav />\r\n                <Container>\r\n                    {title}\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Title</Label>\r\n                            <Input type=\"text\" name=\"name\" id=\"name\" value={this.state.name}\r\n                                onChange={this.onChange} autoComplete=\"name\" />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label for=\"event_date\">Date</Label>\r\n                            <DatePicker selected={this.state.event_date} onChange={this.handleDateChange} />\r\n                        </FormGroup>\r\n                        \r\n                        <FormGroup>\r\n                            <Button color=\"primary\" type=\"submit\">Edit</Button>{' '}\r\n                            <Button color=\"secondary\" tag={Link} to=\"/event\">Cancel</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditEvent;","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport ReactNotifications from 'react-notifications-component';\n\nimport Home from './components/Home';\nimport Admin from './components/Admin';\nimport User from './components/User';\nimport EventForm from './components/EventForm';\nimport BookingForm from './components/BookingForm';\nimport EditEvent from './components/EditEvent';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n            <ReactNotifications />\n                <Switch>\n                    <Route path='/' exact={true} component={Home} />\n                    <Route path='/user' exact={true} component={User} />\n                    <Route path='/admin' exact={true} component={Admin} />\n                    <Route path='/event' exact={true} component={EventForm} />\n                    <Route path='/booking' exact={true} component={BookingForm} />\n                    <Route path='/editEvent' exact={true} component={EditEvent} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/SpaceDoggo.82eb6e8a.png\";"],"sourceRoot":""}